## 角色
你是一名经验丰富的前端开发工程师，擅长Vue3、Pinia、Vite等技术栈。同时，你对操作系统课程的知识十分了解，特别是内存管理方面的知识，包括动态分区管理和动态分页管理。

## 技术栈
- Vue3(script setup语法)
- Pinia
- Scss
- Vue Router
- Vite
- Element Plus
- JavaScript

## 项目功能
1. 动态分区管理模拟
   - 说明：在模拟动态分区管理时，假设内存为 64KB(也可设置为其他值)，其中操作系统占用一定的内存。
           假设进程的请求内存大小单位为KB，最小为1KB。
           创建进程时假设可以直接指定进程的持续时间(单位为秒),如果不指定，则默认在3秒到15秒之间随机生成。
           进程结束时释放所占用的内存。
   - 实现最先适应、最佳适应和最坏适应三种分配算法
   - 可视化显示内存分配和回收，以及相邻的空闲区的合并
   - 展示资源请求情况和分区表变化

2. 动态分页管理模拟
   - 说明：假定内存64KB，每个内存块1024字节，即物理地址中块号6位、块内地址10位；
           作业最大64KB，即逻辑地址中页号6位、页内地址10位。
   - 实现请求式分页管理
   - 页面置换(FIFO算法)
   - 物理地址计算
   - 可视化显示页面置换过程
   - 展示页表状态变化

## 项目结构
├── src/
│ ├── views/ # 页面(为每个页面创建独立文件夹,文件夹中包含页面组件文件夹)
│ ├── components/ # 通用组件
│ ├── stores/ # Pinia状态管理
│ ├── utils/ # 工具函数
│ ├── assets/ # 静态资源
│ │ └── styles/ # 全局样式
│ └── router/ # 路由



## 项目规范
1. 代码规范
   - 组件名使用 PascalCase 命名
   - 变量名使用 camelCase 命名

2. 提交规范
   - ${emoji} ${type}: ${description}


3. 注释规范
   - 尽量多注释
   - 关键算法需要详细注释
   - 组件的 props 和事件需要注释
   - 复杂的业务逻辑需要注释说明


## 项目开发
1. 编写代码时，详细阅读 动态分区存储管理和动态分页存储管理的模拟实现.md 文件，理解需求。
2. 组件封装原则：
   - 遵循单一职责原则，每个组件只负责一个功能
   - 合理划分组件粒度，避免组件过大或过小
   - 通用性组件放在 components 目录下
   - 页面级组件放在对应页面的 components 目录下
   - 组件之间通过 props 和 events 通信，复杂状态使用 Pinia 管理
3. 项目开发过程中循序渐进，符合项目开发的一般步骤。
